package lyc.compiler;

import java_cup.runtime.*;

class Parser;

// Terminals
terminal WHILE;
terminal WRITE;
terminal IF;
terminal ELSE;
terminal INIT;
terminal READ;
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal INTEGER_CONSTANT;
terminal IDENTIFIER;
terminal STRING_CONSTANT;
terminal FLOAT_CONSTANT;
terminal OPEN_CURLY_BRACKET;
terminal CLOSE_CURLY_BRACKET;
terminal OPEN_SQUARE_BRACKET;
terminal CLOSE_SQUARE_BRACKET;
terminal DOT;
terminal DOS_PUNTOS;
terminal COMA;
terminal SEMI_COLON;
terminal LESS_THAN;
terminal GREATER_THAN;
terminal EQUAL;
terminal NOT_EQUAL;
terminal LESS_THAN_EQUAL;
terminal GREATER_THAN_EQUAL;
terminal AND;
terminal OR;
terminal NOT;
terminal QUOT;
terminal SINGLE_QUOT;
terminal PERCENT;


// Non Terminals
//non terminal code;
non terminal block;
non terminal sentence;
non terminal assignment;
non terminal selection;
non terminal iteration;
non terminal escribir;
non terminal leer;
non terminal expression;
non terminal term;
non terminal factor;
non terminal condition;
non terminal comparation;
non terminal comparator;
non terminal inicializar;


// Start Symbol Definition

start with block;
//code ::= block {: System.out.println("End"); :};
block ::= sentence {: System.out.println("Block"); :};
block ::= block sentence {: System.out.println("Blocks"); :};

sentence ::= assignment {: System.out.println("Sentence asignacion"); :};
sentence ::= selection {: System.out.println("Sentence seleccion"); :};
sentence ::= iteration {: System.out.println("Sentence while"); :};
sentence ::= escribir {: System.out.println("Sentence write"); :};
sentence ::= leer {: System.out.println("Sentence read"); :};
sentence ::= inicializar {: System.out.println("Sentence init"); :};

selection ::= IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET {: System.out.println("if solo"); :};
selection ::= IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET {: System.out.println("If"); :} ELSE OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET {: System.out.println("Else"); :};

condition ::= comparation {: System.out.println("Condition"); :};
condition ::= condition AND comparation {: System.out.println("Condition AND"); :};
condition ::= condition OR comparation {: System.out.println("Condition OR"); :};

comparation ::= expression comparator expression {: System.out.println("Comparation <"); :};

comparator ::= LESS_THAN {: System.out.println("<"); :};
comparator ::= GREATER_THAN {: System.out.println(">"); :};
comparator ::= EQUAL {: System.out.println("=="); :};
comparator ::= NOT_EQUAL {: System.out.println("!="); :};
comparator ::= LESS_THAN_EQUAL {: System.out.println("<="); :};
comparator ::= GREATER_THAN_EQUAL {: System.out.println(">="); :};

assignment ::= IDENTIFIER:id {: System.out.println("Id: " + id); :} ASSIG expression {: System.out.println("Assignment"); :};


//iteracion

escribir ::= WRITE OPEN_BRACKET STRING_CONSTANT CLOSE_BRACKET{: System.out.println("Write"); :};
escribir ::= WRITE OPEN_BRACKET IDENTIFIER CLOSE_BRACKET{: System.out.println("Write"); :};

leer ::= READ OPEN_BRACKET IDENTIFIER CLOSE_BRACKET{: System.out.println("Write"); :};

iteration ::= WHILE {: System.out.println("While"); :};
inicializar ::= INIT {: System.out.println("Init"); :};

expression ::= expression PLUS term {: System.out.println("+"); :};
expression ::= expression SUB term {: System.out.println("-"); :};
expression ::= term {: System.out.println("Expression = Term"); :};

term ::= term MULT factor {: System.out.println("*"); :};
term ::= term DIV factor {: System.out.println("/"); :};
term ::= factor {: System.out.println("Term = factor"); :};

factor ::= IDENTIFIER:id  {: System.out.println("Id: " + id); :};
factor ::= INTEGER_CONSTANT:intConstant {: System.out.println("Int Constant: " + intConstant ); :};
factor ::= FLOAT_CONSTANT:floatConstant {: System.out.println("Float Constant: " + floatConstant ); :};
factor ::= STRING_CONSTANT:stringConstant {: System.out.println("String Constant: " + stringConstant ); :};
factor ::= OPEN_BRACKET expression CLOSE_BRACKET {: System.out.println("Factor = (Expression)"); :};






