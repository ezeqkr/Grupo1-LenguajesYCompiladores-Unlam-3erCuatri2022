package lyc.compiler;

import java_cup.runtime.*;

class Parser;


// Terminals
terminal WHILE;
terminal WRITE;
terminal IF;
terminal ELSE;
terminal INIT;
terminal READ;
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal INTEGER_CONSTANT;
terminal IDENTIFIER;
terminal STRING_CONSTANT;
terminal FLOAT_CONSTANT;
terminal OPEN_CURLY_BRACKET;
terminal CLOSE_CURLY_BRACKET;
terminal OPEN_SQUARE_BRACKET;
terminal CLOSE_SQUARE_BRACKET;
terminal DOT;
terminal DOS_PUNTOS;
terminal COMA;
terminal SEMI_COLON;
terminal LESS_THAN;
terminal GREATER_THAN;
terminal EQUAL;
terminal NOT_EQUAL;
terminal LESS_THAN_EQUAL;
terminal GREATER_THAN_EQUAL;
terminal AND;
terminal OR;
terminal NOT;
terminal QUOT;
terminal SINGLE_QUOT;
terminal PERCENT;


// Non Terminals
//non terminal code;
non terminal block;
non terminal sentence;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;
non terminal if_;
non terminal condition;
non terminal comparators;
/*non terminal while;
non terminal write;
non terminal read;
non terminal init;*/

// Start Symbol Definition

start with block;
//code ::= block {: System.out.println("End"); :};
block ::= sentence {: System.out.println("Block"); :};
block ::= block sentence {: System.out.println("Blocks"); :};
sentence ::= assignment {: System.out.println("Sentence asig"); :};
//If hay que mejorar este if pero funciona
sentence ::= if_ {: System.out.println("Sentence if"); :};
if_ ::= IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET {: System.out.println("if solo"); :};
if_ ::= IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET ELSE OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET {: System.out.println("if y else"); :};
condition ::= expression comparators expression{: System.out.println("Condicion"); :};
comparators ::= EQUAL | NOT_EQUAL | LESS_THAN_EQUAL | GREATER_THAN_EQUAL | LESS_THAN | GREATER_THAN {: System.out.println("COMPARADOR"); :};

assignment ::= IDENTIFIER:id {: System.out.println("Id: " + id); :} ASSIG expression {: System.out.println("Assignment"); :};
expression ::= expression PLUS term {: System.out.println("+"); :};
expression ::= expression SUB term {: System.out.println("-"); :};
expression ::= term {: System.out.println("Expression = Term"); :};
term ::= term MULT factor {: System.out.println("*"); :};
term ::= term DIV factor {: System.out.println("/"); :};
term ::= factor {: System.out.println("Term = factor"); :};
factor ::= IDENTIFIER:id  {: System.out.println("Id: " + id); :};
factor ::= INTEGER_CONSTANT:intConstant {: System.out.println("Int Constant: " + intConstant ); :};
factor ::= FLOAT_CONSTANT:floatConstant {: System.out.println("Float Constant: " + floatConstant ); :};
factor ::= STRING_CONSTANT:stringConstant {: System.out.println("String Constant: " + stringConstant ); :};
factor ::= OPEN_BRACKET expression CLOSE_BRACKET {: System.out.println("Factor = (Expression)"); :};
